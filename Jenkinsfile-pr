pipeline {
    agent none

    stages {
        stage('Checkout') {
            agent { node('cxs-slave-master') }

            steps {
                echo sh(returnStdout: true, script: 'env')
                configFileProvider([configFile(fileId: '37cb206e-6498-4d8a-9b3d-379cd0ccd99b', targetLocation: 'settings.xml')]) {
                    sh 'mkdir -p ~/.m2 && sed -i "s|@LOCAL_REPO_PATH@|$WORKSPACE/M2_REPO|g" $WORKSPACE/settings.xml && cp $WORKSPACE/settings.xml -f ~/.m2/settings.xml'
                }
                checkout scm
            }
        }

        stage('Build') {
            agent { node('cxs-slave-master') }
            steps {
                sh "mvn clean install -DskipTests"
            }
        }

        stage('Test') {
            agent { node('cxs-slave-master') }
            steps {
                sh 'mvn test -Dmaven.test.failure.ignore=true'
                junit testResults: '**/target/surefire-reports/*.xml', testDataPublishers: [[$class: 'StabilityTestDataPublisher']]
            }
        }

        stage('UserApproval') {
            agent none

            steps {
                milestone 1
                script {
                    def userInput = input message: 'Waiting for maintainer review', parameters:
                        [choice(name: 'RELEASE_SCOPE', choices: 'fix\nfeat\nbreaking_change', description: 'Release Scope'),
                         text(name: 'COMMIT_MSG', defaultValue: '', description: 'Commit Message')]
                    env.RELEASE_SCOPE = userInput['RELEASE_SCOPE']
                    env.COMMIT_MSG = userInput['COMMIT_MSG']
                }
                milestone 2
            }
        }

        stage('ContinuousIntegration') {
            agent { node('cxs-slave-master') }

            steps {
                configFileProvider([configFile(fileId: '37cb206e-6498-4d8a-9b3d-379cd0ccd99b', targetLocation: 'settings.xml')]) {
                    sh 'mkdir -p ~/.m2 && sed -i "s|@LOCAL_REPO_PATH@|$WORKSPACE/M2_REPO|g" $WORKSPACE/settings.xml && cp $WORKSPACE/settings.xml -f ~/.m2/settings.xml'
                }

                lock('media-core-master') {
                    script {
                        // Increment project version according to release scope
                        if(env.RELEASE_SCOPE == 'fix') {
                            sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.\\${parsedVersion.nextIncrementalVersion}-SNAPSHOT versions:commit'
                        } else if(env.RELEASE_SCOPE == 'feat') {
                            sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.nextMinorVersion}.0-SNAPSHOT versions:commit'
                        } else if(env.RELEASE_SCOPE == 'breaking_change') {
                            sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.nextMajorVersion}.0.0-SNAPSHOT versions:commit'
                        }

                        // Read current project version
                        def pom = readMavenPom file: 'pom.xml'
                        env.PROJECT_VERSION = pom.version
                        echo "Updated project version to $PROJECT_VERSION with commit message: $COMMIT_MSG"
                    }

                    // TODO Push changes to master
                }
            }
        }
    }

}
