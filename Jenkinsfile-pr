pipeline {
    agent none

    stages {
        stage('Checkout') {
            agent { node('cxs-slave-master') }

            steps {
                echo sh(returnStdout: true, script: 'env')
                configFileProvider([configFile(fileId: '37cb206e-6498-4d8a-9b3d-379cd0ccd99b', targetLocation: 'settings.xml')]) {
                    sh 'mkdir -p ~/.m2 && sed -i "s|@LOCAL_REPO_PATH@|$WORKSPACE/M2_REPO|g" $WORKSPACE/settings.xml && cp $WORKSPACE/settings.xml -f ~/.m2/settings.xml'
                }
                checkout scm
            }

        }

        stage('Build') {
            agent { node('cxs-slave-master') }
            steps {
                configFileProvider([configFile(fileId: '37cb206e-6498-4d8a-9b3d-379cd0ccd99b', targetLocation: 'settings.xml')]) {
                    sh 'mkdir -p ~/.m2 && sed -i "s|@LOCAL_REPO_PATH@|$WORKSPACE/M2_REPO|g" $WORKSPACE/settings.xml && cp $WORKSPACE/settings.xml -f ~/.m2/settings.xml'
                }
                sh "mvn clean install -DskipTests"
            }
        }

        stage('Test') {
            agent { node('cxs-slave-master') }
            steps {
                configFileProvider([configFile(fileId: '37cb206e-6498-4d8a-9b3d-379cd0ccd99b', targetLocation: 'settings.xml')]) {
                    sh 'mkdir -p ~/.m2 && sed -i "s|@LOCAL_REPO_PATH@|$WORKSPACE/M2_REPO|g" $WORKSPACE/settings.xml && cp $WORKSPACE/settings.xml -f ~/.m2/settings.xml'
                }
                sh 'mvn test -Dmaven.test.failure.ignore=true'
                junit testResults: '**/target/surefire-reports/*.xml', testDataPublishers: [[$class: 'StabilityTestDataPublisher']]
            }
        }

        stage('UserApproval') {
            agent none

            steps {
                script {
                    def userInput = input message: 'Waiting for maintainer review', parameters:
                        [choice(name: 'FEATURE_SCOPE', choices: 'fix\nfeat\nbreaking_change', description: 'Release Scope'),
                         text(name: 'COMMIT_MSG', defaultValue: '', description: 'Commit Message')]
                    env.FEATURE_SCOPE = userInput['FEATURE_SCOPE']
                    env.COMMIT_MSG = userInput['COMMIT_MSG']
                    env.COMMIT_AUTHOR = sh(script: 'git log -1 --pretty=format:\'%an <%ae>\'', returnStdout: true).trim()
                }
            }
            milestone 1
        }

        stage('ContinuousIntegration') {
            agent none

            steps {
                script {
                    def media_core_ci_job = build(job: "media-core-ci",
                        parameters:[string(name: 'BRANCH_NAME', value: "${env.BRANCH_NAME}"),
                                    string(name: 'FEATURE_SCOPE', value: "${env.FEATURE_SCOPE}"),
                                    string(name: 'COMMIT_MSG', value: "${env.COMMIT_MSG}"),
                                    string(name: 'COMMIT_AUTHOR', value: "${env.COMMIT_AUTHOR}")])
                }
            }
        }
    }
}
